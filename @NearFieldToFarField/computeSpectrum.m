function obj = computeSpectrum(obj)
    
    % compute plane wave spectrum components
    spectrumX = fftshift(fft2(obj.nearField.X, obj.fftSizeX, obj.fftSizeY));
    spectrumY = fftshift(fft2(obj.nearField.Y, obj.fftSizeX, obj.fftSizeY));
    
    disp("spectrumX, spectrumY");
    size(spectrumX), size(spectrumY)
    
    % compute indices of the near-field grid
    indexX = -obj.fftSizeX/2 : obj.fftSizeX/2 - 1;
    indexY = -obj.fftSizeY/2 : obj.fftSizeY/2 - 1;
    
    % compute the grid space between adjacent points
    spaceX = abs(obj.nearField.x(1,1) - obj.nearField.x(2,1));
    spaceY = abs(obj.nearField.y(1,1) - obj.nearField.y(1,2));
    
    % compute wave-number components in x- and y-coordinate
    waveNumberX = 2*pi*indexX/(obj.fftSizeX*spaceX);
    waveNumberY = 2*pi*indexY/(obj.fftSizeY*spaceY);
    
    [waveNumberYGrid, waveNumberXGrid] = meshgrid(waveNumberY, waveNumberX); 
    
    obj.spectrum = MeshgridQuantity(waveNumberXGrid, ...
                                    waveNumberYGrid, ...
                                    spectrumX,       ...
                                    spectrumY);
    
    size(obj.spectrum.X)
                                    
    % re-compute the wave-number components w.r.t theta- and phi-coordinate
    interpWaveNumberX = obj.waveNumber * sin(obj.farFieldGrid.theta) .* ...
                        cos(obj.farFieldGrid.phi);
    interpWaveNumberY = obj.waveNumber * sin(obj.farFieldGrid.theta) .* ...
                        sin(obj.farFieldGrid.phi);
    
    % interpolate the spectrum components (from rectangular to angular coordinates)
    interpSpectrumX = interp2(waveNumberX,       ...
                              waveNumberY,       ...
                              abs(spectrumX)',   ...
                              interpWaveNumberX, ...
                              interpWaveNumberY, ...
                              "spline");
                          
    interpSpectrumY = interp2(waveNumberX,       ...
                              waveNumberY,       ...
                              abs(spectrumY)',   ...
                              interpWaveNumberX, ...
                              interpWaveNumberY, ...
                              "spline");
                              
    obj.interpSpectrum = MeshgridQuantity(interpWaveNumberX, ...
                                          interpWaveNumberY, ...
                                          interpSpectrumX,   ...
                                          interpSpectrumY);
end